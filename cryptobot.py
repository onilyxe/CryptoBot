import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import cryptocompare

TOKEN = '0000000000:0000000000000000000000000000000000'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#/start-----
@dp.message_handler(commands=['start'])
async def send_message(message: types.Message):
    await message.reply("üëã–ü—Ä–∏–≤—ñ—Ç. –Ø –≤–º—ñ—é –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n‚úçÔ∏è–ù–∞–ø–∏—à–∏ */help* —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫ –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è.", parse_mode="Markdown")

#/help-----
@dp.message_handler(commands=['help'])
async def send_message(message: types.Message):
    await message.reply("‚öôÔ∏è*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*"+
    "\n*/start* ‚Äî _–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞._"+
    "\n*/help* ‚Äî _—Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è._"+
    "\n*/p* ‚Äî _—Ü—ñ–Ω–∞ BTC —É $_"+
    "\n*/p* BTC ‚Äî _—Ü—ñ–Ω–∞ BTC —É $_"+
    "\n*/p* BTC USD ‚Äî _—Ü—ñ–Ω–∞ BTC –∫ USD_"+
    "\n\n‚ÑπÔ∏è*BTC* —Ç–∞ *USD* - –±—É–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É. –ë–æ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ –∑–≤–∏—á–∞–π–Ω—ñ –≤–∞–ª—é—Ç–∏ —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.", parse_mode="Markdown")

#/p-----
@dp.message_handler(commands=['p'])
async def p(message: types.Message):
    args = message.text.split()
    crypto_currency = args[1].upper() if len(args) > 1 else "BTC"
    fiat_currency = args[2].upper() if len(args) > 2 else "USD"
    sUSD = "$"
    sEUR = "‚Ç¨"
    sUAH = "‚Ç¥"
    symbols = {"USD": sUSD, "EUR": sEUR, "UAH": sUAH}
    price = cryptocompare.get_price(crypto_currency, currency=fiat_currency, full=False)

    if not price:
        await message.reply("‚öôÔ∏è–¶—è –ø–∞—Ä–∞ –≤–∞–ª—é—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É.")
        return

    currency_symbol = symbols.get(fiat_currency, "")
    await message.reply(f"‚Äî *{crypto_currency} –∫ {fiat_currency}:*\n‚Äî *{currency_symbol} {price[crypto_currency][fiat_currency]}*", parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp)
